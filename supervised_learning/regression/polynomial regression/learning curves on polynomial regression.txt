import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import style
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
style.use('fivethirtyeight')

m=100
'''
print(np.random.randn(m,1))
print(np.random.rand(m,1))
print(np.random.randint(m))
'''
x=6*np.random.rand(m,1)-3
y=0.5*x**2+x+2+np.random.randn(m,1)

x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=10)
x_test=sorted(x_test,reverse=False)

def poly_reg(x_new):
    poly_features=PolynomialFeatures(degree=3,include_bias=False)
    x_poly=poly_features.fit_transform(x_new)
    return x_poly

def reg():
    slr=LinearRegression()
    slr.fit(poly_reg(x_train),y_train)
    y_pred=slr.predict(poly_reg(x_test))
    print(np.sqrt(mean_squared_error(y_pred,y_test)))
    plt.scatter(x,y,color='red',marker='*',s=100)
    plt.plot(x_test,y_pred,marker='o',color='green')
    plt.show()
       
def lin():
    slr=LinearRegression()
    slr.fit(x_train,y_train)
    y_pred=slr.predict(x_test)
    print(np.sqrt(mean_squared_error(y_pred,y_test)))
    plt.scatter(x,y,color='red',marker='*',s=100)
    plt.plot(x_test,y_pred,marker='o',color='green')
    plt.show()

def learning_curves(p,q,r,s):
    x_train_errors=[]
    y_test_errors=[]
    slr=LinearRegression()
    for i in range(1,len(p)):
        slr.fit(p[:i],q[:i])
        y_pred_train=slr.predict(p[:i])
        y_pred_test=slr.predict(r)
        x_train_errors.append(mean_squared_error(y_pred_train,q[:i]))
        y_test_errors.append(mean_squared_error(y_pred_test,s))
    plt.plot(np.sqrt(x_train_errors),'r-+',linewidth=2,label='training set')
    plt.plot(np.sqrt(y_test_errors),'b-',linewidth=3,label='validation set')
    plt.legend()
    plt.show()   
     
#reg()
#lin()
learning_curves(poly_reg(x_train),y_train,poly_reg(x_test),y_test)