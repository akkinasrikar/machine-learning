from sklearn.datasets import load_digits
import numpy as np
from matplotlib import style
import matplotlib.pyplot as plt
style.use('fivethirtyeight')
mnist=load_digits()

x=np.array(mnist.images)
y=np.array(mnist.target)
n=int(input("enter the number btw 1 to 1500>>"))
some_digit=np.array(x[n])
plt.imshow(some_digit,cmap=plt.cm.gray_r,interpolation='nearest')
plt.axis("off")
plt.show
print(f"expected output {y[n]}")


nsamples=len(x)
x=x.reshape((nsamples,-1))


from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report,confusion_matrix
from sklearn.model_selection import cross_val_score
x_train,y_train,x_test,y_test=x[:1300],y[:1300],x[1300:],y[1300:]
shuffle_index=np.random.permutation(1300)
x_train,y_train=x_train[shuffle_index],y_train[shuffle_index]

def nva():
    nvb=MultinomialNB()
    nvb.fit(x_train,y_train)
    y_pred=nvb.predict(x_test)
    print(confusion_matrix(y_test,y_pred))
    print(classification_report(y_test,y_pred))
    print(cross_val_score(nvb,x_train,y_train,cv=13).mean())
    print("predicted output >>",end=" ")
    print(nvb.predict(some_digit.reshape((1,-1))))
    
def kna():
    knn=KNeighborsClassifier(n_neighbors=3)
    knn.fit(x_train,y_train)
    y_pred=knn.predict(x_test)
    print(confusion_matrix(y_test,y_pred))
    print(classification_report(y_test,y_pred))
    print(cross_val_score(knn,x_train,y_train,cv=13).mean())
    print("predicted output >>",end=" ")
    print(knn.predict(some_digit.reshape((1,-1))))
    
def error():
    error_rate=[]
    for i in range(1,10):
         knn=KNeighborsClassifier(n_neighbors=i)
         knn.fit(x_train,y_train)
         y_pred=knn.predict(x_test)
         error_rate.append(np.mean(y_pred!=y_test))
    plt.plot(range(1,10),
             error_rate,color='blue',
             linestyle='dashed',
             marker='o',
             markersize=10,
             markerfacecolor='red')
    plt.show    
    
nva()
kna()
#error()
 
#output


runfile('C:/Users/personal/.spyder-py3/temp.py', wdir='C:/Users/personal/.spyder-py3')

enter the number btw 1 to 1500>>369
expected output 2
[[46  0  0  0  3  0  0  0  0  0]
 [ 0 38  0  0  0  0  0  0  1 11]
 [ 1  3 41  1  0  0  0  0  0  2]
 [ 0  0  0 39  0  1  0  3  7  1]
 [ 1  0  0  0 47  0  0  0  3  0]
 [ 0  0  0  0  1 40  1  0  0  9]
 [ 0  1  0  0  0  0 50  0  0  0]
 [ 0  0  0  0  1  0  0 47  2  0]
 [ 0  2  0  0  1  0  0  1 38  4]
 [ 0  0  0  1  0  2  0  5  1 41]]
              precision    recall  f1-score   support

           0       0.96      0.94      0.95        49
           1       0.86      0.76      0.81        50
           2       1.00      0.85      0.92        48
           3       0.95      0.76      0.85        51
           4       0.89      0.92      0.90        51
           5       0.93      0.78      0.85        51
           6       0.98      0.98      0.98        51
           7       0.84      0.94      0.89        50
           8       0.73      0.83      0.78        46
           9       0.60      0.82      0.69        50

    accuracy                           0.86       497
   macro avg       0.87      0.86      0.86       497
weighted avg       0.88      0.86      0.86       497

0.9099926437861903
predicted output >> [2]
[[48  0  0  0  1  0  0  0  0  0]
 [ 0 50  0  0  0  0  0  0  0  0]
 [ 1  0 47  0  0  0  0  0  0  0]
 [ 0  0  1 47  0  1  0  1  1  0]
 [ 0  0  0  0 48  0  0  1  1  1]
 [ 0  0  0  0  0 50  1  0  0  0]
 [ 0  0  0  0  0  0 51  0  0  0]
 [ 0  0  0  0  0  0  0 50  0  0]
 [ 0  2  0  0  0  0  0  0 44  0]
 [ 0  0  0  1  0  2  0  0  0 47]]
              precision    recall  f1-score   support

           0       0.98      0.98      0.98        49
           1       0.96      1.00      0.98        50
           2       0.98      0.98      0.98        48
           3       0.98      0.92      0.95        51
           4       0.98      0.94      0.96        51
           5       0.94      0.98      0.96        51
           6       0.98      1.00      0.99        51
           7       0.96      1.00      0.98        50
           8       0.96      0.96      0.96        46
           9       0.98      0.94      0.96        50

    accuracy                           0.97       497
   macro avg       0.97      0.97      0.97       497
weighted avg       0.97      0.97      0.97       497

0.9884193836178417
predicted output >> [2]