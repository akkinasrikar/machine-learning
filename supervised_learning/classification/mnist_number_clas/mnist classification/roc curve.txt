from sklearn.datasets import load_digits
import numpy as np
from matplotlib import style
import matplotlib.pyplot as plt
style.use('fivethirtyeight')
mnist=load_digits()

x=np.array(mnist.images)
y=np.array(mnist.target)


nsamples=len(x)
x=x.reshape((nsamples,-1))

x_1_0=[]
y_1_0=[]
for i in range(len(x)):
    if y[i]==0:
        x_1_0.append(x[i])
        y_1_0.append(y[i])
    elif y[i]==1:
        x_1_0.append(x[i])
        y_1_0.append(y[i])
    else:
        continue
x_1_0=np.array(x_1_0)
y_1_0=np.array(y_1_0)
#print(len(y_1_0))



from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report,confusion_matrix
from sklearn.model_selection import cross_val_score
x_train,y_train,x_test,y_test=x_1_0[:250],y_1_0[:250],x_1_0[250:],y_1_0[250:]
shuffle_index=np.random.permutation(250)
x_train,y_train=x_train[shuffle_index],y_train[shuffle_index]

def nva():
    nvb=MultinomialNB()
    nvb.fit(x_train,y_train)
    y_pred=nvb.predict(x_test)
    print(confusion_matrix(y_test,y_pred))
    print(classification_report(y_test,y_pred))
    print(cross_val_score(nvb,x_train,y_train,cv=13,scoring='accuracy').mean())
    print("predicted output >>",end=" ")
    print(nvb.predict(some_digit.reshape((1,-1))))
    
def kna():
    knn=KNeighborsClassifier(n_neighbors=3)
    knn.fit(x_train,y_train)
    y_pred=knn.predict(x_test)
    print(confusion_matrix(y_test,y_pred))
    print(classification_report(y_test,y_pred))
    print(cross_val_score(knn,x_train,y_train,cv=13,scoring='accuracy').mean())
    print("predicted output >>",end=" ")
    print(knn.predict(some_digit.reshape((1,-1))))
    
   

from sklearn.metrics import roc_curve

def roc():
    nvb=MultinomialNB()
    nvb.fit(x_train,y_train)
    y_pred1=nvb.predict(x_test)
    knn=KNeighborsClassifier(n_neighbors=3)
    knn.fit(x_train,y_train)
    y_pred2=knn.predict(x_test)
    fpr,tpr,threshhold=roc_curve(y_test,y_pred1)
    plt.plot(fpr,tpr,marker='*',linewidth=2,label='navie bayes')
    fpr,tpr,threshhold=roc_curve(y_test,y_pred2)
    plt.plot(fpr,tpr,marker='o',linewidth=2,label='knn')
    plt.plot([0,1],[0,1],"k--")
    plt.title("Roc curve(navie bayes vs knn)")
    plt.xlabel('false positive rate')
    plt.ylabel('true positive rate')
    plt.legend(loc='center right')
    plt.show
    
nva()
kna()
roc()
