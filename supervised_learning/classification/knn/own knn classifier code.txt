import numpy as np
from math import sqrt
import matplotlib.pyplot as plt
from matplotlib import style
import warnings
from collections import Counter
style.use('fivethirtyeight')

dataset={'k':[[1,2],[2,3],[3,1]],'r':[[6,5],[7,7],[8,6]] }
new_one=[4,4]
for i in dataset:
    for ii in dataset[i]:
        plt.scatter(ii[0],ii[1],s=100,color=i,marker='*')
plt.scatter(new_one[0],new_one[1],s=100,color='green')
plt.show
        

def knn(data,predict,k=3):
    if len(data)>=k:
        warnings.warn('k is not to set to a value less than total voting groups')
    distances=[]
    for group in data:
        for feature in data[group]:
            euclidean_distance=np.linalg.norm(np.array(feature)-np.array(predict))
            distances.append([euclidean_distance,group])
    print(distances)
    votes=[i[1] for i in sorted(distances)[:k]]
    print(votes)
    print(Counter(votes).most_common(1))
    vote_result=Counter(votes).most_common(1)[0][0]
    return vote_result

result=knn(dataset,new_one)
print(result)

#output

runfile('F:/machine learnig/notes/supervised/regression/simple linear regression/smallex.py', wdir='F:/machine learnig/notes/supervised/regression/simple linear regression')
[[3.605551275463989, 'k'], [2.23606797749979, 'k'], [3.1622776601683795, 'k'], [2.23606797749979, 'r'], [4.242640687119285, 'r'], [4.47213595499958, 'r']]
['k', 'r', 'k']
[('k', 2)]
k